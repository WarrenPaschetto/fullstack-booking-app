// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: availability_pattern.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createAvailabilityPattern = `-- name: CreateAvailabilityPattern :exec
INSERT INTO availability_pattern (id, provider_id, day_of_week, start_time, end_time)
VALUES (?, ?, ?, ?, ?)
`

type CreateAvailabilityPatternParams struct {
	ID         uuid.UUID
	ProviderID uuid.UUID
	DayOfWeek  int64
	StartTime  interface{}
	EndTime    interface{}
}

func (q *Queries) CreateAvailabilityPattern(ctx context.Context, arg CreateAvailabilityPatternParams) error {
	_, err := q.db.ExecContext(ctx, createAvailabilityPattern,
		arg.ID,
		arg.ProviderID,
		arg.DayOfWeek,
		arg.StartTime,
		arg.EndTime,
	)
	return err
}

const deleteAvailabilityPattern = `-- name: DeleteAvailabilityPattern :exec
DELETE FROM availability_pattern
WHERE id = ?
AND provider_id = ?
`

type DeleteAvailabilityPatternParams struct {
	ID         uuid.UUID
	ProviderID uuid.UUID
}

func (q *Queries) DeleteAvailabilityPattern(ctx context.Context, arg DeleteAvailabilityPatternParams) error {
	_, err := q.db.ExecContext(ctx, deleteAvailabilityPattern, arg.ID, arg.ProviderID)
	return err
}

const getAvailabilityPatternByID = `-- name: GetAvailabilityPatternByID :one
SELECT id, provider_id, day_of_week, start_time, end_time, created_at, updated_at
FROM availability_pattern
WHERE id = ?
`

func (q *Queries) GetAvailabilityPatternByID(ctx context.Context, id uuid.UUID) (AvailabilityPattern, error) {
	row := q.db.QueryRowContext(ctx, getAvailabilityPatternByID, id)
	var i AvailabilityPattern
	err := row.Scan(
		&i.ID,
		&i.ProviderID,
		&i.DayOfWeek,
		&i.StartTime,
		&i.EndTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPatternsByProvider = `-- name: ListPatternsByProvider :many
SELECT
  id,
  day_of_week,
  start_time,
  end_time,
  created_at,
  updated_at
FROM availability_pattern
WHERE provider_id = ?
ORDER BY day_of_week, start_time
`

type ListPatternsByProviderRow struct {
	ID        uuid.UUID
	DayOfWeek int64
	StartTime interface{}
	EndTime   interface{}
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) ListPatternsByProvider(ctx context.Context, providerID uuid.UUID) ([]ListPatternsByProviderRow, error) {
	rows, err := q.db.QueryContext(ctx, listPatternsByProvider, providerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPatternsByProviderRow
	for rows.Next() {
		var i ListPatternsByProviderRow
		if err := rows.Scan(
			&i.ID,
			&i.DayOfWeek,
			&i.StartTime,
			&i.EndTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAvailabilityPattern = `-- name: UpdateAvailabilityPattern :exec
UPDATE availability_pattern
SET 
  day_of_week = ?,
  start_time = ?,
  end_time = ?,
  updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateAvailabilityPatternParams struct {
	DayOfWeek int64
	StartTime interface{}
	EndTime   interface{}
	ID        uuid.UUID
}

func (q *Queries) UpdateAvailabilityPattern(ctx context.Context, arg UpdateAvailabilityPatternParams) error {
	_, err := q.db.ExecContext(ctx, updateAvailabilityPattern,
		arg.DayOfWeek,
		arg.StartTime,
		arg.EndTime,
		arg.ID,
	)
	return err
}
