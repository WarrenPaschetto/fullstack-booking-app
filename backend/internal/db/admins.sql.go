// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: admins.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createAdmin = `-- name: CreateAdmin :exec
INSERT INTO admins (id, first_name, last_name, created_at, updated_at, email, password_hash)
VALUES (
    uuid(), 
    ?,
    ?,
    CURRENT_TIMESTAMP, 
    CURRENT_TIMESTAMP, 
    ?,
    ?
)
`

type CreateAdminParams struct {
	FirstName    string
	LastName     string
	Email        string
	PasswordHash string
}

func (q *Queries) CreateAdmin(ctx context.Context, arg CreateAdminParams) error {
	_, err := q.db.ExecContext(ctx, createAdmin,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.PasswordHash,
	)
	return err
}

const deleteAdmin = `-- name: DeleteAdmin :exec
DELETE FROM admins WHERE id = ?
`

func (q *Queries) DeleteAdmin(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteAdmin, id)
	return err
}

const getAdminByEmail = `-- name: GetAdminByEmail :one
SELECT id, first_name, last_name, created_at, updated_at, email, password_hash FROM admins
WHERE email = ?
`

func (q *Queries) GetAdminByEmail(ctx context.Context, email string) (Admin, error) {
	row := q.db.QueryRowContext(ctx, getAdminByEmail, email)
	var i Admin
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.PasswordHash,
	)
	return i, err
}

const listAdmins = `-- name: ListAdmins :many
SELECT id, first_name, last_name, created_at, updated_at, email, password_hash FROM admins ORDER BY last_name ASC, first_name ASC
`

func (q *Queries) ListAdmins(ctx context.Context) ([]Admin, error) {
	rows, err := q.db.QueryContext(ctx, listAdmins)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Admin
	for rows.Next() {
		var i Admin
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Email,
			&i.PasswordHash,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAdmin = `-- name: UpdateAdmin :exec
UPDATE admins 
SET first_name = ?, last_name = ?, email = ?, password_hash = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateAdminParams struct {
	FirstName    string
	LastName     string
	Email        string
	PasswordHash string
	ID           uuid.UUID
}

func (q *Queries) UpdateAdmin(ctx context.Context, arg UpdateAdminParams) error {
	_, err := q.db.ExecContext(ctx, updateAdmin,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.PasswordHash,
		arg.ID,
	)
	return err
}
