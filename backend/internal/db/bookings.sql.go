// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: bookings.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createBooking = `-- name: CreateBooking :one
INSERT INTO bookings (id, created_at, updated_at, appointment_start, duration_minutes, user_id)
VALUES (
    ?,
    CURRENT_TIMESTAMP,
    CURRENT_TIMESTAMP,
    ?,
    ?,
    ?
)
RETURNING id, created_at, updated_at, appointment_start, duration_minutes, user_id
`

type CreateBookingParams struct {
	ID               uuid.UUID
	AppointmentStart time.Time
	DurationMinutes  int64
	UserID           uuid.UUID
}

func (q *Queries) CreateBooking(ctx context.Context, arg CreateBookingParams) (Booking, error) {
	row := q.db.QueryRowContext(ctx, createBooking,
		arg.ID,
		arg.AppointmentStart,
		arg.DurationMinutes,
		arg.UserID,
	)
	var i Booking
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AppointmentStart,
		&i.DurationMinutes,
		&i.UserID,
	)
	return i, err
}

const deleteBooking = `-- name: DeleteBooking :exec
DELETE FROM bookings 
WHERE id = ? AND user_id = ?
`

type DeleteBookingParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) DeleteBooking(ctx context.Context, arg DeleteBookingParams) error {
	_, err := q.db.ExecContext(ctx, deleteBooking, arg.ID, arg.UserID)
	return err
}

const getBookingByID = `-- name: GetBookingByID :one
SELECT id, created_at, updated_at, appointment_start, duration_minutes, user_id FROM bookings
WHERE id = ?
`

func (q *Queries) GetBookingByID(ctx context.Context, id uuid.UUID) (Booking, error) {
	row := q.db.QueryRowContext(ctx, getBookingByID, id)
	var i Booking
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AppointmentStart,
		&i.DurationMinutes,
		&i.UserID,
	)
	return i, err
}

const getOverlappingBookings = `-- name: GetOverlappingBookings :many
SELECT
  id,
  created_at,
  updated_at,
  appointment_start,
  duration_minutes,
  user_id
FROM bookings
WHERE 
  appointment_start < ?1
  AND DATETIME(appointment_start, '+' || duration_minutes || ' minutes') > ?2
`

type GetOverlappingBookingsParams struct {
	NewEnd   time.Time
	NewStart time.Time
}

func (q *Queries) GetOverlappingBookings(ctx context.Context, arg GetOverlappingBookingsParams) ([]Booking, error) {
	rows, err := q.db.QueryContext(ctx, getOverlappingBookings, arg.NewEnd, arg.NewStart)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Booking
	for rows.Next() {
		var i Booking
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AppointmentStart,
			&i.DurationMinutes,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAllBookingsForAdmin = `-- name: ListAllBookingsForAdmin :many
SELECT id, created_at, updated_at, appointment_start, duration_minutes, user_id From bookings
ORDER BY appointment_start
`

func (q *Queries) ListAllBookingsForAdmin(ctx context.Context) ([]Booking, error) {
	rows, err := q.db.QueryContext(ctx, listAllBookingsForAdmin)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Booking
	for rows.Next() {
		var i Booking
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AppointmentStart,
			&i.DurationMinutes,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBookingsForUser = `-- name: ListBookingsForUser :many
SELECT id, created_at, updated_at, appointment_start, duration_minutes, user_id FROM bookings
WHERE user_id = ?
ORDER BY appointment_start
`

func (q *Queries) ListBookingsForUser(ctx context.Context, userID uuid.UUID) ([]Booking, error) {
	rows, err := q.db.QueryContext(ctx, listBookingsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Booking
	for rows.Next() {
		var i Booking
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AppointmentStart,
			&i.DurationMinutes,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const rescheduleBooking = `-- name: RescheduleBooking :one
UPDATE bookings
SET appointment_start = ?
WHERE id = ?
RETURNING id, created_at, updated_at, appointment_start, duration_minutes, user_id
`

type RescheduleBookingParams struct {
	AppointmentStart time.Time
	ID               uuid.UUID
}

func (q *Queries) RescheduleBooking(ctx context.Context, arg RescheduleBookingParams) (Booking, error) {
	row := q.db.QueryRowContext(ctx, rescheduleBooking, arg.AppointmentStart, arg.ID)
	var i Booking
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AppointmentStart,
		&i.DurationMinutes,
		&i.UserID,
	)
	return i, err
}
